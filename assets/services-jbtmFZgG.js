import{D as t}from"./database-DJZASbgB.js";const e={},a=function(t,a,r){let i=Promise.resolve();if(a&&a.length>0){let t=function(t){return Promise.all(t.map(t=>Promise.resolve(t).then(t=>({status:"fulfilled",value:t}),t=>({status:"rejected",reason:t}))))};document.getElementsByTagName("link");const r=document.querySelector("meta[property=csp-nonce]"),s=r?.nonce||r?.getAttribute("nonce");i=t(a.map(t=>{if((t=function(t){return"/triage-aid/"+t}(t))in e)return;e[t]=!0;const a=t.endsWith(".css"),r=a?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${t}"]${r}`))return;const i=document.createElement("link");return i.rel=a?"stylesheet":"modulepreload",a||(i.as="script"),i.crossOrigin="",i.href=t,s&&i.setAttribute("nonce",s),document.head.appendChild(i),a?new Promise((e,a)=>{i.addEventListener("load",e),i.addEventListener("error",()=>a(new Error(`Unable to preload CSS for ${t}`)))}):void 0}))}function s(t){const e=new Event("vite:preloadError",{cancelable:!0});if(e.payload=t,window.dispatchEvent(e),!e.defaultPrevented)throw t}return i.then(e=>{for(const t of e||[])"rejected"===t.status&&s(t.reason);return t().catch(s)})};const r=new class{currentLanguage="en";translations={en:{},ar:{}};listeners=[];constructor(){this.loadTranslations(),this.loadLanguagePreference()}async loadTranslations(){try{const t=await a(()=>import("./locales-CEWyrnPm.js").then(t=>t.e),[]);this.translations.en=t.default;const e=await a(()=>import("./locales-CEWyrnPm.js").then(t=>t.a),[]);this.translations.ar=e.default}catch(t){}}loadLanguagePreference(){try{const t=localStorage.getItem("triageaid-language");!t||"en"!==t&&"ar"!==t||(this.currentLanguage=t)}catch(t){}}saveLanguagePreference(t){try{localStorage.setItem("triageaid-language",t)}catch(e){}}getCurrentLanguage(){return this.currentLanguage}setLanguage(t){t!==this.currentLanguage&&(this.currentLanguage=t,this.saveLanguagePreference(t),this.updateDocumentDirection(),this.notifyListeners())}t(t,e){const a=this.translations[this.currentLanguage]?.[t];if(a)return a;if("en"!==this.currentLanguage){const e=this.translations.en?.[t];if(e)return e}return e||t}isRTL(){return"ar"===this.currentLanguage}getDirection(){return this.isRTL()?"rtl":"ltr"}updateDocumentDirection(){"undefined"!=typeof document&&(document.documentElement.dir=this.getDirection(),document.documentElement.lang=this.currentLanguage)}subscribe(t){return this.listeners.push(t),()=>{const e=this.listeners.indexOf(t);e>-1&&this.listeners.splice(e,1)}}notifyListeners(){this.listeners.forEach(t=>{try{t(this.currentLanguage)}catch(e){}})}async initialize(){await this.loadTranslations(),this.updateDocumentDirection()}getAvailableLanguages(){return[{code:"en",name:"English",nativeName:"English"},{code:"ar",name:"Arabic",nativeName:"العربية"}]}formatNumber(t){try{return new Intl.NumberFormat("ar"===this.currentLanguage?"ar-SA":"en-US").format(t)}catch(e){return"ar"===this.currentLanguage?t.toLocaleString("ar-SA"):t.toString()}}formatDate(t){try{return new Intl.DateTimeFormat("ar"===this.currentLanguage?"ar-SA":"en-US",{year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(t)}catch(e){return t.toLocaleString()}}formatTime(t){try{return new Intl.DateTimeFormat("ar"===this.currentLanguage?"ar-SA":"en-US",{hour:"2-digit",minute:"2-digit"}).format(t)}catch(e){return t.toLocaleTimeString()}}},i={red:{level:"red",description:"Immediate - Life threatening",urgency:1,color:"#DC2626",icon:"emergency"},yellow:{level:"yellow",description:"Urgent - Serious injuries",urgency:2,color:"#D97706",icon:"warning"},green:{level:"green",description:"Minor - Can wait",urgency:3,color:"#059669",icon:"check"},black:{level:"black",description:"Deceased/Expectant",urgency:4,color:"#374151",icon:"cross"}};function s(t){const e=i[t];if(!e)throw new Error(`Invalid triage priority level: ${t}`);return e}const n=new class extends t{patients;constructor(){super("TriageAidDB"),this.version(1).stores({patients:"id, timestamp, lastUpdated, priority, status"}),this.patients.hook("creating",(t,e)=>{e.timestamp=e.timestamp||new Date,e.lastUpdated=e.lastUpdated||new Date}),this.patients.hook("updating",t=>{t.lastUpdated=new Date})}async initialize(){try{await this.open()}catch(t){throw new Error("Database initialization failed")}}async clearAllData(){await this.patients.clear()}async getStats(){const t=await this.patients.toArray(),e={},a={};return t.forEach(t=>{e[t.status]=(e[t.status]||0)+1,a[t.priority]=(a[t.priority]||0)+1}),{totalPatients:t.length,patientsByStatus:e,patientsByPriority:a}}},o="AES-GCM",c=256,l=12;const u=new class{encryptionKey=null;keyStorageKey="triage-encryption-key";constructor(){this.initializeEncryption()}async initializeEncryption(){try{const t=localStorage.getItem(this.keyStorageKey);if(t){const e=this.base64ToArrayBuffer(t);this.encryptionKey=await crypto.subtle.importKey("raw",e,{name:o},!1,["encrypt","decrypt"])}else await this.generateNewEncryptionKey()}catch(t){await this.generateNewEncryptionKey()}}async generateNewEncryptionKey(){this.encryptionKey=await crypto.subtle.generateKey({name:o,length:c},!0,["encrypt","decrypt"]);const t=await crypto.subtle.exportKey("raw",this.encryptionKey),e=this.arrayBufferToBase64(t);localStorage.setItem(this.keyStorageKey,e)}async getEncryptionKey(){if(this.encryptionKey||await this.initializeEncryption(),!this.encryptionKey)throw new Error("Failed to initialize encryption key");return this.encryptionKey}generatePatientId(){return crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,t=>{const e=(15&(crypto.getRandomValues(new Uint8Array(1))[0]||0))>>("x"===t?0:2);return("x"===t?e:3&e|8).toString(16)})}async encryptPatientData(t){try{const e=await this.getEncryptionKey(),a=JSON.stringify(t),r=(new TextEncoder).encode(a),i=crypto.getRandomValues(new Uint8Array(l)),s=await crypto.subtle.encrypt({name:o,iv:i},e,r),n=new Uint8Array(i.length+s.byteLength);return n.set(i,0),n.set(new Uint8Array(s),i.length),this.arrayBufferToBase64(n.buffer)}catch(e){throw new Error("Failed to encrypt patient data")}}async decryptPatientData(t){try{const e=await this.getEncryptionKey(),a=this.base64ToArrayBuffer(t),r=a.slice(0,l),i=a.slice(l),s=await crypto.subtle.decrypt({name:o,iv:r},e,i),n=(new TextDecoder).decode(s),c=JSON.parse(n);return c.timestamp=new Date(c.timestamp),c.lastUpdated=new Date(c.lastUpdated),c}catch(e){throw new Error("Failed to decrypt patient data")}}validateInput(t){try{return JSON.stringify(t),!0}catch{return!1}}arrayBufferToBase64(t){const e=new Uint8Array(t);let a="";for(let r=0;r<e.byteLength;r++){const t=e[r];void 0!==t&&(a+=String.fromCharCode(t))}return btoa(a)}base64ToArrayBuffer(t){const e=atob(t),a=new Uint8Array(e.length);for(let r=0;r<e.length;r++)a[r]=e.charCodeAt(r);return a.buffer}async clearEncryptionKeys(){localStorage.removeItem(this.keyStorageKey),this.encryptionKey=null}};const h=new class{assessPatient(t){const e=[];try{return this.canWalk(t)?(e.push("Patient can walk and follow commands"),{priority:s("green"),reasoning:"Patient is ambulatory and alert - minor injuries that can wait for treatment",assessmentPath:e}):(e.push("Patient cannot walk - continuing assessment"),"absent"===t.vitals.breathing?(e.push("Breathing is absent"),{priority:s("black"),reasoning:"No spontaneous breathing - deceased or expectant care",assessmentPath:e}):this.hasRespiratoryDistress(t)?(e.push("Respiratory distress detected"),{priority:s("red"),reasoning:"Respiratory distress or rate >30/min - immediate intervention required",assessmentPath:e}):(e.push("Breathing adequate - continuing assessment"),this.hasCirculatoryCompromise(t)?(e.push("Circulatory compromise detected"),{priority:s("red"),reasoning:"Poor circulation or perfusion - immediate intervention required",assessmentPath:e}):(e.push("Circulation adequate - continuing assessment"),this.canFollowSimpleCommands(t)?(e.push("Mental status adequate"),e.push("All vital signs stable - delayed care appropriate"),{priority:s("yellow"),reasoning:"Stable vitals but non-ambulatory - delayed care within hours",assessmentPath:e}):(e.push("Cannot follow simple commands"),{priority:s("red"),reasoning:"Altered mental status - immediate intervention required",assessmentPath:e}))))}catch(a){return{priority:s("red"),reasoning:"Assessment error - defaulting to immediate care for safety",assessmentPath:[...e,"Error in assessment - safety default"]}}}canWalk(t){const e="ambulatory"===t.mobility,a="alert"===t.vitals.consciousness;return e&&a}hasRespiratoryDistress(t){const{breathing:e,respiratoryRate:a}=t.vitals;return"labored"===e||null!=a&&a>30}hasCirculatoryCompromise(t){const{circulation:e,pulse:a,capillaryRefill:r,radialPulse:i}=t.vitals;return"bleeding"===e||"shock"===e||("absent"===i||(null!=r&&r>2||null!==a&&(a<50||a>120)))}canFollowSimpleCommands(t){const{consciousness:e}=t.vitals;return"alert"===e||"verbal"===e}recalculatePriority(t){return this.assessPatient(t).priority}getTriageRules(){return[{condition:t=>this.canWalk(t),priority:s("green"),reasoning:"Ambulatory and alert - minor injuries",step:"Walking wounded assessment"},{condition:t=>"absent"===t.vitals.breathing,priority:s("black"),reasoning:"No spontaneous breathing",step:"Breathing assessment"},{condition:t=>this.hasRespiratoryDistress(t),priority:s("red"),reasoning:"Respiratory distress or rate >30/min",step:"Respiratory assessment"},{condition:t=>this.hasCirculatoryCompromise(t),priority:s("red"),reasoning:"Poor circulation or perfusion",step:"Circulation assessment"},{condition:t=>!this.canFollowSimpleCommands(t),priority:s("red"),reasoning:"Altered mental status",step:"Mental status assessment"}]}validatePatientData(t){const e=[],a=[];return t.vitals.breathing||e.push("breathing status"),t.vitals.consciousness||e.push("consciousness level"),t.vitals.circulation||e.push("circulation status"),null===t.vitals.pulse&&a.push("pulse rate not recorded"),null===t.vitals.respiratoryRate&&a.push("respiratory rate not recorded"),t.mobility||a.push("mobility status not assessed"),{isValid:0===e.length,missingFields:e,warnings:a}}};const d=new class{isInitialized=!1;constructor(){this.initialize()}async initialize(){try{await n.initialize(),this.isInitialized=!0}catch(t){throw t}}async ensureInitialized(){this.isInitialized||await this.initialize()}async createPatient(t){await this.ensureInitialized();try{const e=u.generatePatientId(),a={id:e,...t,timestamp:new Date,lastUpdated:new Date,priority:s("green"),status:"active"},r=h.assessPatient(a);a.priority=r.priority;const i={id:e,encryptedData:await u.encryptPatientData(a),timestamp:a.timestamp,lastUpdated:a.lastUpdated,priority:a.priority.urgency,status:a.status};return await n.patients.add(i),e}catch(e){throw new Error("Failed to create patient record")}}async getPatient(t){await this.ensureInitialized();try{const e=await n.patients.get(t);if(!e)return null;return await u.decryptPatientData(e.encryptedData)}catch(e){throw new Error("Failed to retrieve patient record")}}async updatePatient(t,e){await this.ensureInitialized();try{const a=await this.getPatient(t);if(!a)throw new Error("Patient not found");const r={...a,...e,vitals:{...a.vitals,...e.vitals},lastUpdated:new Date,id:a.id,timestamp:a.timestamp};if(e.vitals||e.mobility){const t=h.recalculatePriority(r);r.priority=t}const i=await u.encryptPatientData(r);await n.patients.update(t,{encryptedData:i,lastUpdated:r.lastUpdated,priority:r.priority.urgency,status:r.status})}catch(a){throw new Error("Failed to update patient record")}}async getAllPatients(){await this.ensureInitialized();try{const e=await n.patients.toArray();e.sort((t,e)=>t.priority-e.priority);const a=[];for(const r of e)try{const t=await u.decryptPatientData(r.encryptedData);a.push(t)}catch(t){}return a}catch(t){throw new Error("Failed to retrieve patient records")}}async deletePatient(t){await this.ensureInitialized();try{await n.patients.delete(t);if(await n.patients.get(t))throw new Error("Failed to delete patient")}catch(e){throw new Error("Failed to delete patient record")}}async getPatientsByStatus(t){await this.ensureInitialized();try{const a=await n.patients.where("status").equals(t).toArray();a.sort((t,e)=>t.priority-e.priority);const r=[];for(const t of a)try{const e=await u.decryptPatientData(t.encryptedData);r.push(e)}catch(e){}return r}catch(e){throw new Error("Failed to retrieve patients by status")}}async getPatientsByPriority(t){await this.ensureInitialized();try{const a=s(t).urgency,r=await n.patients.where("priority").equals(a).toArray();r.sort((t,e)=>t.timestamp.getTime()-e.timestamp.getTime());const i=[];for(const t of r)try{const e=await u.decryptPatientData(t.encryptedData);i.push(e)}catch(e){}return i}catch(e){throw new Error("Failed to retrieve patients by priority")}}async clearAllData(){await this.ensureInitialized();try{await n.clearAllData()}catch(t){throw new Error("Failed to clear patient data")}}async exportData(){await this.ensureInitialized();try{const t=await n.patients.toArray(),e={version:"1.0",timestamp:(new Date).toISOString(),patients:t};return JSON.stringify(e,null,2)}catch(t){throw new Error("Failed to export patient data")}}async importData(t){await this.ensureInitialized();const e=[];let a=0;try{const i=JSON.parse(t);if(!i.version||!i.patients||!Array.isArray(i.patients))throw new Error("Invalid import data format");"1.0"!==i.version&&e.push(`Unsupported data version: ${i.version}`);for(const t of i.patients)try{if(!t.id||!t.encryptedData){e.push("Invalid patient record: missing required fields");continue}if(await n.patients.get(t.id)){e.push(`Patient ${t.id} already exists - skipped`);continue}try{await u.decryptPatientData(t.encryptedData)}catch{e.push(`Failed to decrypt patient ${t.id}: invalid data`);continue}await n.patients.add({id:t.id,encryptedData:t.encryptedData,timestamp:new Date(t.timestamp),lastUpdated:new Date(t.lastUpdated),priority:t.priority,status:t.status}),a++}catch(r){e.push(`Failed to import patient ${t.id}: ${r instanceof Error?r.message:"Unknown error"}`)}return{imported:a,errors:e}}catch(r){throw new Error("Failed to import patient data")}}async getStorageStats(){await this.ensureInitialized();try{const t=await n.getStats(),e=(await n.patients.toArray()).reduce((t,e)=>t+e.encryptedData.length+200,0);return{totalPatients:t.totalPatients,storageUsed:e,patientsByStatus:t.patientsByStatus,patientsByPriority:t.patientsByPriority}}catch(t){throw new Error("Failed to retrieve storage statistics")}}async bulkUpdatePatientStatus(t,e){await this.ensureInitialized();const a=[];let r=0;for(const s of t)try{await this.updatePatient(s,{status:e}),r++}catch(i){a.push(`Failed to update patient ${s}: ${i instanceof Error?i.message:"Unknown error"}`)}return{updated:r,errors:a}}async bulkDeletePatients(t){await this.ensureInitialized();const e=[];let a=0;for(const i of t)try{await this.deletePatient(i),a++}catch(r){e.push(`Failed to delete patient ${i}: ${r instanceof Error?r.message:"Unknown error"}`)}return{deleted:a,errors:e}}async bulkExportPatients(t){await this.ensureInitialized();try{const e=await n.patients.where("id").anyOf(t).toArray(),a={version:"1.0",timestamp:(new Date).toISOString(),patients:e};return JSON.stringify(a,null,2)}catch(e){throw new Error("Failed to export selected patients")}}};class p{static instance;toastCallback=null;errorLog=[];constructor(){}static getInstance(){return p.instance||(p.instance=new p),p.instance}setToastCallback(t){this.toastCallback=t}handleError(t,e={}){const{showToast:a=!0,logError:r=!0,recoveryActions:i=[]}=e;if(r&&this.logError(t),a&&this.toastCallback){const e=this.getUserFriendlyMessage(t),a=t.recoverable?i:[];this.toastCallback({message:e,type:this.getToastType(t),duration:"system"===t.type?0:5e3,actions:a})}t.recoverable&&this.attemptRecovery(t)}handleValidationErrors(t){const e={};return t.forEach(t=>{e[t.field]=this.getLocalizedValidationMessage(t.code,t.message)}),e}showSuccess(t,e){this.toastCallback&&this.toastCallback({message:e?this.interpolateMessage(t,e):t,type:"success",duration:3e3})}showWarning(t,e,a){this.toastCallback&&this.toastCallback({message:e?this.interpolateMessage(t,e):t,type:"warning",duration:5e3,actions:a})}showInfo(t,e){this.toastCallback&&this.toastCallback({message:e?this.interpolateMessage(t,e):t,type:"info",duration:4e3})}showError(t,e,a){this.toastCallback&&this.toastCallback({message:e?this.interpolateMessage(t,e):t,type:"error",duration:0,actions:a})}showToast(t,e="info",a,r){this.toastCallback&&this.toastCallback({message:t,type:e,duration:a??("error"===e?0:"success"===e?3e3:5e3),actions:r})}createError(t,e,a,r,i=!0){return{type:t,code:e,message:a,details:r,timestamp:new Date,recoverable:i}}getErrorLog(){return[...this.errorLog]}clearErrorLog(){this.errorLog=[]}logError(t){this.errorLog.push(t),this.errorLog.length>50&&(this.errorLog=this.errorLog.slice(-50))}getUserFriendlyMessage(t){const e=`error.${t.code}`,a=r.t(e,t.code);return a===t.code?this.getFallbackMessage(t):a}getFallbackMessage(t){switch(t.type){case"data":return r.t("error.dataError","A data storage error occurred");case"validation":return r.t("error.validationError","Please check your input");case"network":return r.t("error.networkError","Network connection issue");case"system":return r.t("error.systemError","A system error occurred");default:return r.t("error.unknownError","An unexpected error occurred")}}getToastType(t){switch(t.type){case"system":default:return"error";case"network":case"validation":return"warning";case"data":return t.recoverable?"warning":"error"}}getLocalizedValidationMessage(t,e){const a=`validation.${t.toLowerCase()}`,i=r.t(a,e);return i===e?e:i}interpolateMessage(t,e){let a=t;return Object.entries(e).forEach(([t,e])=>{a=a.replace(new RegExp(`{{${t}}}`,"g"),e)}),a}attemptRecovery(t){switch(t.type){case"data":this.recoverDataError(t);break;case"network":this.recoverNetworkError(t)}}recoverDataError(t){switch(t.code){case"STORAGE_QUOTA_EXCEEDED":this.showWarning(r.t("error.storageQuotaExceeded","Storage space is running low"),void 0,[{label:r.t("error.cleanupOldData","Clean up old data"),action:()=>{}}]);break;case"ENCRYPTION_FAILED":this.showWarning(r.t("error.encryptionFailed","Failed to encrypt patient data"))}}recoverNetworkError(t){switch(t.code){case"OFFLINE":this.showInfo(r.t("error.workingOffline","You are currently working offline"));break;case"SYNC_FAILED":this.showWarning(r.t("error.syncFailed","Failed to sync data"),void 0,[{label:r.t("error.retrySync","Retry sync"),action:()=>{}}])}}}const y=p.getInstance();const g=new class{currentRoute=null;navigationGuards=new Map;routeChangeListeners=[];breadcrumbListeners=[];basePath="/triage-aid";routes=[{path:"/",view:"home",title:"TriageAid"},{path:"/dashboard",view:"dashboard",title:"Dashboard"},{path:"/intake",view:"intake",title:"Patient Assessment"},{path:"/patient/:id",view:"patient-detail",title:"Patient Details",requiresPatient:!0}];constructor(){this.validateBasePath(),this.initialize()}validateBasePath(){this.basePath.startsWith("/")||(this.basePath=`/${this.basePath}`),this.basePath.endsWith("/")&&this.basePath.length>1&&(this.basePath=this.basePath.slice(0,-1))}initialize(){window.addEventListener("popstate",this.handlePopState.bind(this)),this.handleInitialRoute()}handlePopState(t){const e=this.parseCurrentUrl();e&&this.navigateToRoute(e,!1)}handleInitialRoute(){const t=window.location.pathname,e=(this.stripBasePath(t),this.parseCurrentUrl());e?(this.currentRoute=e,this.notifyRouteChange(e),this.updateBreadcrumbs()):this.navigate("/",!0)}parseCurrentUrl(){const t=window.location.pathname,e=this.stripBasePath(t);return this.matchRoute(e)}matchRoute(t){for(const e of this.routes){const a=this.matchPath(e.path,t);if(a)return{...e,params:a.params}}return null}matchPath(t,e){const a=t.split("/").filter(Boolean),r=e.split("/").filter(Boolean);if("/"===t&&"/"===e)return{params:{}};if(a.length!==r.length)return null;const i={};for(let s=0;s<a.length;s++){const t=a[s],e=r[s];if(!t||!e)return null;if(t.startsWith(":")){i[t.slice(1)]=decodeURIComponent(e)}else if(t!==e)return null}return{params:i}}stripBasePath(t){if(t.startsWith(this.basePath)){return t.slice(this.basePath.length)||"/"}return t}buildPath(t,e){if(!e)return t;let a=t;for(const[r,i]of Object.entries(e))a=a.replace(`:${r}`,encodeURIComponent(i));return a}buildFullPath(t){return t.startsWith("/")||(t=`/${t}`),"/"===t?`${this.basePath}/`:this.basePath+t}async navigate(t,e=!1){const a=this.matchRoute(t);if(!a)return!1;const r=this.buildFullPath(t);return this.navigateToRoute(a,!e,r)}async navigateWithBasePath(t,e=!1){const a=this.matchRoute(t);if(!a)return!1;const r=this.buildFullPath(t);return this.navigateToRoute(a,!e,r)}async navigateToView(t,e,a=!1){const r=this.routes.find(e=>e.view===t);if(!r)return!1;const i=this.buildPath(r.path,e),s=this.buildFullPath(i),n={...r,params:e||{}};return this.navigateToRoute(n,!a,s)}async navigateToRoute(t,e=!0,a){if(this.currentRoute&&!(await this.canLeaveCurrentRoute()))return!1;if(t.requiresPatient&&!t.params?.id)return!1;if(e){const e=this.buildPath(t.path,t.params),r=a||this.buildFullPath(e);window.history.pushState({route:t},t.title||"",r)}return this.currentRoute=t,t.title&&(document.title=`${t.title} - TriageAid`),this.notifyRouteChange(t),this.updateBreadcrumbs(),!0}async canLeaveCurrentRoute(){if(!this.currentRoute)return!0;const t=this.navigationGuards.get(this.currentRoute.view);if(!t)return!0;const e=await t.canLeave();if(!e&&t.message){return window.confirm(t.message)}return e}registerNavigationGuard(t,e){this.navigationGuards.set(t,e)}removeNavigationGuard(t){this.navigationGuards.delete(t)}onRouteChange(t){return this.routeChangeListeners.push(t),()=>{const e=this.routeChangeListeners.indexOf(t);e>-1&&this.routeChangeListeners.splice(e,1)}}onBreadcrumbChange(t){return this.breadcrumbListeners.push(t),()=>{const e=this.breadcrumbListeners.indexOf(t);e>-1&&this.breadcrumbListeners.splice(e,1)}}notifyRouteChange(t){this.routeChangeListeners.forEach(e=>{try{e(t)}catch(a){}})}updateBreadcrumbs(){const t=this.generateBreadcrumbs();this.breadcrumbListeners.forEach(e=>{try{e(t)}catch(a){}})}generateBreadcrumbs(){if(!this.currentRoute)return[];const t=[{label:"TriageAid",path:"/"}];switch(this.currentRoute.view){case"home":t[0]&&(t[0].active=!0);break;case"dashboard":t.push({label:"Dashboard",active:!0});break;case"intake":t.push({label:"Dashboard",path:"/dashboard"},{label:"New Assessment",active:!0});break;case"patient-detail":{const e=this.currentRoute.params?.id;t.push({label:"Dashboard",path:"/dashboard"},{label:e?`Patient #${e.slice(0,8).toUpperCase()}`:"Patient Details",active:!0});break}}return t}getCurrentRoute(){return this.currentRoute}getCurrentView(){return this.currentRoute?.view||null}getCurrentParams(){return this.currentRoute?.params||{}}goBack(){window.history.back()}goForward(){window.history.forward()}async replace(t){return this.navigate(t,!0)}generateUrl(t,e){const a=this.routes.find(e=>e.view===t);if(!a)return this.buildFullPath("/dashboard");const r=this.buildPath(a.path,e);return this.buildFullPath(r)}getBasePath(){return this.basePath}};const w=new class{registration=null;updateCallbacks=[];statusCallbacks=[];isOnline=navigator.onLine;constructor(){this.setupOnlineStatusListeners()}async initialize(){if(!("serviceWorker"in navigator))throw new Error("Service workers not supported");try{await this.registerServiceWorker(),this.setupServiceWorkerListeners()}catch(t){throw t}}async registerServiceWorker(){try{this.registration=await navigator.serviceWorker.register("/sw.js",{scope:"/"}),await this.checkForUpdates(),window.setInterval(()=>{this.checkForUpdates()},18e5)}catch(t){throw t}}setupServiceWorkerListeners(){this.registration&&(this.registration.addEventListener("updatefound",()=>{const t=this.registration?.installing;t&&t.addEventListener("statechange",()=>{"installed"===t.state&&navigator.serviceWorker.controller&&this.notifyUpdateCallbacks({available:!0,waiting:!0})})}),navigator.serviceWorker.addEventListener("message",t=>{this.handleServiceWorkerMessage(t.data)}),navigator.serviceWorker.addEventListener("controllerchange",()=>{window.location.reload()}))}handleServiceWorkerMessage(t){if("BACK_ONLINE"===t.type)this.handleOnlineStatusChange(!0)}async checkForUpdates(){if(this.registration)try{await this.registration.update()}catch(t){}}async applyUpdate(){if(!this.registration||!this.registration.waiting)throw new Error("No update available");this.registration.waiting.postMessage({type:"SKIP_WAITING"})}setupOnlineStatusListeners(){window.addEventListener("online",()=>{this.handleOnlineStatusChange(!0)}),window.addEventListener("offline",()=>{this.handleOnlineStatusChange(!1)})}handleOnlineStatusChange(t){const e=this.isOnline;if(this.isOnline=t,e!==t&&(this.notifyStatusCallbacks(),t&&this.registration&&"sync"in window.ServiceWorkerRegistration.prototype))try{this.registration.sync.register("background-sync")}catch(a){}}getStatus(){return{isOnline:this.isOnline,isInstalled:this.isInstalled(),updateAvailable:this.isUpdateAvailable(),registration:this.registration}}isInstalled(){return window.matchMedia("(display-mode: standalone)").matches||!0===window.navigator.standalone}isUpdateAvailable(){return Boolean(this.registration&&this.registration.waiting)}onUpdate(t){return this.updateCallbacks.push(t),()=>{const e=this.updateCallbacks.indexOf(t);e>-1&&this.updateCallbacks.splice(e,1)}}onStatusChange(t){return this.statusCallbacks.push(t),()=>{const e=this.statusCallbacks.indexOf(t);e>-1&&this.statusCallbacks.splice(e,1)}}notifyUpdateCallbacks(t){this.updateCallbacks.forEach(e=>{try{e(t)}catch(a){}})}notifyStatusCallbacks(){const t=this.getStatus();this.statusCallbacks.forEach(e=>{try{e(t)}catch(a){}})}async showInstallPrompt(){const t=window.deferredPrompt;if(!t)return!1;try{t.prompt();const{outcome:e}=await t.userChoice;return window.deferredPrompt=null,"accepted"===e}catch(e){return!1}}async getVersion(){return this.registration?.active?new Promise(t=>{const e=new MessageChannel;e.port1.onmessage=e=>{"VERSION"===e.data.type?t(e.data.version):t("unknown")};const a=this.registration?.active;a?a.postMessage({type:"GET_VERSION"},[e.port2]):t("no-active-worker"),window.setTimeout(()=>t("timeout"),5e3)}):"unknown"}async clearCaches(){if("caches"in window){const t=await caches.keys();await Promise.all(t.map(t=>caches.delete(t)))}}};export{a as _,d,y as e,r as i,w as p,g as r,h as t};
